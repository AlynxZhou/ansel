if(USE_XCF)
  add_subdirectory(libxcf)
endif()

add_library(whereami STATIC "${CMAKE_CURRENT_SOURCE_DIR}/whereami/src/whereami.c")
target_include_directories(whereami PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/whereami/src/")

if(USE_INTERNAL_EXIV2)
  option(EXIV2_ENABLE_BMFF "Build with BMFF support" ON)
  # It seems we don't need this.
  option(EXIV2_BUILD_EXIV2_COMMAND "Build exiv2 command-line executable" OFF)
  # Not sure why, but exiv2 says it cannot find header generated by itself.
  include_directories(${CMAKE_BINARY_DIR})
  # Exiv2 does not add its module path.
  list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/exiv2/cmake/")
  # HACK: To co-exist with system exiv2, install internal one into lib dir. This
  # is not so good because it installs many things like man / cmake, but I
  # really really don't want to support `/opt` prefix only.
  set(CMAKE_INSTALL_LIBDIR_SAVE "${CMAKE_INSTALL_LIBDIR}")
  set(CMAKE_INSTALL_LIBEXECDIR_SAVE "${CMAKE_INSTALL_LIBEXECDIR}")
  set(CMAKE_INSTALL_BINDIR_SAVE "${CMAKE_INSTALL_BINDIR}")
  set(CMAKE_INSTALL_INCLUDEDIR_SAVE "${CMAKE_INSTALL_INCLUDEDIR}")
  set(CMAKE_INSTALL_MANDIR_SAVE "${CMAKE_INSTALL_MANDIR}")
  set(CMAKE_INSTALL_DOCDIR_SAVE "${CMAKE_INSTALL_DOCDIR}")

  set(CMAKE_INSTALL_LIBDIR "${CMAKE_INSTALL_LIBDIR}/ansel")
  set(CMAKE_INSTALL_LIBEXECDIR_SAVE "${CMAKE_INSTALL_LIBEXECDIR}/ansel")
  # Well, user should not call the copy's binary, they should like libexec.
  set(CMAKE_INSTALL_BINDIR "${CMAKE_INSTALL_LIBEXECDIR}/ansel")
  set(CMAKE_INSTALL_INCLUDEDIR "${CMAKE_INSTALL_INCLUDEDIR}/ansel")
  # So this is 1. not good, 2. not good, but I have to do it.
  set(CMAKE_INSTALL_MANDIR_SAVE "${CMAKE_INSTALL_LIBDIR}/ansel")
  set(CMAKE_INSTALL_DOCDIR_SAVE "${CMAKE_INSTALL_DOCDIR}/ansel")

  add_subdirectory(exiv2)

  set(CMAKE_INSTALL_LIBDIR "${CMAKE_INSTALL_LIBDIR_SAVE}")
  set(CMAKE_INSTALL_LIBEXECDIR "${CMAKE_INSTALL_LIBEXECDIR_SAVE}")
  set(CMAKE_INSTALL_BINDIR "${CMAKE_INSTALL_BINDIR_SAVE}")
  set(CMAKE_INSTALL_INCLUDEDIR "${CMAKE_INSTALL_INCLUDEDIR_SAVE}")
  set(CMAKE_INSTALL_MANDIR "${CMAKE_INSTALL_MANDIR_SAVE}")
  set(CMAKE_INSTALL_DOCDIR "${CMAKE_INSTALL_DOCDIR_SAVE}")
endif()

set(BUILD_TESTING_SAVE "${BUILD_TESTING}")

set(BUILD_TESTING OFF CACHE BOOL "" FORCE)
set(BUILD_FUZZERS OFF CACHE BOOL "" FORCE)
set(WITH_OPENMP ${USE_OPENMP} CACHE BOOL "" FORCE)

set(RAWSPEED_PATH "${CMAKE_CURRENT_SOURCE_DIR}/rawspeed")
set(RAWSPEED_BINARY_PREFIX "ansel")

if(NOT(EXISTS "${RAWSPEED_PATH}" AND IS_DIRECTORY "${RAWSPEED_PATH}" AND EXISTS "${RAWSPEED_PATH}/CMakeLists.txt"))
  message(FATAL_ERROR "RawSpeed submodule not found. You probably want to run:\n$ git submodule init\nand then\n$ git submodule update")
endif()

set(OPENCL_PATH "${CMAKE_CURRENT_SOURCE_DIR}/OpenCL")

if(NOT(EXISTS "${OPENCL_PATH}" AND IS_DIRECTORY "${OPENCL_PATH}" AND EXISTS "${OPENCL_PATH}/CL/opencl.h"))
  message("OpenCL submodule not found. You probably want to run:\n$ git submodule init\nand then\n$ git submodule update\nOr let the OS headers to be used.")
endif()

set(CMAKE_INSTALL_DATAROOTDIR_SAVE "${CMAKE_INSTALL_DATAROOTDIR}")

set(CMAKE_C_FLAGS_SAVE "${CMAKE_C_FLAGS}")
set(CMAKE_CXX_FLAGS_SAVE "${CMAKE_CXX_FLAGS}")

set(CMAKE_INSTALL_DATAROOTDIR "${CMAKE_INSTALL_DATAROOTDIR}/ansel")

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -w")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -w")

set(CMAKE_CXX_CLANG_TIDY_SAVE "${CMAKE_CXX_CLANG_TIDY}")
set(CMAKE_CXX_INCLUDE_WHAT_YOU_USE_SAVE "${CMAKE_CXX_INCLUDE_WHAT_YOU_USE}")

unset(CMAKE_CXX_CLANG_TIDY)
unset(CMAKE_CXX_INCLUDE_WHAT_YOU_USE)

add_subdirectory(rawspeed ${DARKTABLE_LIBDIR}/rawspeed)
# Copying rawspeed resources to where dt expects them
add_custom_target("deploy" ALL)
SET(RAWSPEED_DATADIR "${CMAKE_CURRENT_SOURCE_DIR}/rawspeed/data")
add_custom_command(TARGET "deploy" PRE_BUILD
  COMMAND ${CMAKE_COMMAND} -E make_directory ${DARKTABLE_DATADIR}/rawspeed/
  COMMAND ${CMAKE_COMMAND} -E copy ${RAWSPEED_DATADIR}/cameras.xml ${RAWSPEED_DATADIR}/showcameras.xsl ${DARKTABLE_DATADIR}/rawspeed/
)

set(CMAKE_INSTALL_DATAROOTDIR "${CMAKE_INSTALL_DATAROOTDIR_SAVE}")

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS_SAVE}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS_SAVE}")

set(CMAKE_CXX_CLANG_TIDY "${CMAKE_CXX_CLANG_TIDY_SAVE}")
set(CMAKE_CXX_INCLUDE_WHAT_YOU_USE "${CMAKE_CXX_INCLUDE_WHAT_YOU_USE_SAVE}")

set(BUILD_TESTING "${BUILD_TESTING_SAVE}" CACHE BOOL "" FORCE)
